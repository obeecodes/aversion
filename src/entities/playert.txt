//#include "../../include/entity/player.h"
#include "../../include/SDL2/SDL_timer.h"
#include"../../include/SDL2/SDL_scancode.h"
//#include "../../include/input/inputSystem.h"

//#include "../../include/engine/vector2d.h"

//const double MAX_ACCELERATION = 4;
const double MAX_VELOCITY = 2;
static int lastCounter = 0;

const int ANIMATE_FRAMES = 3;
const int STABLE_FPS = 120;

Uint16 current = 0;
Uint16 past = 0;
Uint16 start = 0;

enum Directional {
  W = 1 << 0,
  S = 1 << 1,
  A = 1 << 2,
  D = 1 << 3,

  /*
  WD = W | D,
  SD = S | D,
  SA = S | A,
  WA = W | A,
  */
  
};
/*
Player::Player(const std::shared_ptr<DataLoader> dataloader):Entity(dataloader){
  //temporary 
  //this->vec = std::make_unique<Vector2D>();

  this->animate.reset(); 
}

void Player::update(){

  input();

  //remove later : causes player to follow mouse
  //std::shared_ptr<Vector2D> vec = InputManager::Instance()->getMousePosition();
  //this->velocity = (*vec - this->position)/100;

  SDLGameObject::update();

  if(InputManager::Instance()->getMouseButtonState(0)){
    //this->velocity.setX(4);
  }

  this->animate.reset();

}

void Player::input(){

  past = (lastCounter > 0) ? past : SDL_GetTicks();
  current = (lastCounter > 0) ? SDL_GetTicks() : current;

  lastCounter = 0;

  this->animate.reset();
  


  if(InputManager::Instance()->isKeyDown(SDL_SCANCODE_W)){
    this->velocity.setY(-MAX_VELOCITY);
    //this->acceleration.setY(this->acceleration.getY() > -MAX_ACCELERATION ? this->acceleration.getY() + -0.1 : -MAX_ACCELERATION);
    this->animate.set(0);
    this->currentFrame = int((((current - past) / STABLE_FPS) % ANIMATE_FRAMES) + 1);
    lastCounter++;

  }else{
    this->velocity.setY(0);
  }

  if(InputManager::Instance()->isKeyDown(SDL_SCANCODE_S)){
    this->velocity.setY(MAX_VELOCITY);
    //this->acceleration.setY(this->acceleration.getY() < MAX_ACCELERATION ? this->acceleration.getY() + 0.1 : MAX_ACCELERATION);
    this->animate.set(1);
    this->currentFrame = int((((current - past) / STABLE_FPS) % ANIMATE_FRAMES) + 1);
    lastCounter++;
  }

  if(InputManager::Instance()->isKeyDown(SDL_SCANCODE_A)){
    this->velocity.setX(-MAX_VELOCITY);
    //this->acceleration.setX(this->acceleration.getX() > -MAX_ACCELERATION ? this->acceleration.getX() + -0.1 : -MAX_ACCELERATION);
    this->animate.set(2);
    this->currentFrame = int((((current - past) / STABLE_FPS) % ANIMATE_FRAMES) + 1);
    lastCounter++;
  }else{
    this->velocity.setX(0);
  }

  if(InputManager::Instance()->isKeyDown(SDL_SCANCODE_D)){
    this->velocity.setX(MAX_VELOCITY);
    //this->acceleration.setX(this->acceleration.getX() < MAX_ACCELERATION ? this->acceleration.getX() + 0.1 : MAX_ACCELERATION);
    this->animate.set(3);
    this->currentFrame = int((((current - past) / STABLE_FPS) % ANIMATE_FRAMES) + 1);
    lastCounter++;
  }

  this->currentFrame = (lastCounter > 0) ? this->currentFrame : 0;
  setAnimation();
}

void Player::setAnimation(){
  switch(this->animate.to_ulong()){
 
    case W:
      this->currentRow = 0;
      break;

    case S:
      this->currentRow = 1;
      break;

    case A:
      this->currentRow = 2;
      break;

    case D:
      this->currentRow = 3;
      break;
    
    case WD:
      this->currentRow = 1;
      break;

    case SD:
      this->currentRow = 3;
      break;

    case SA:
      this->currentRow = 5;
      break;

    case WA:
      this->currentRow = 7;
      break;
    
  }    
}
*/